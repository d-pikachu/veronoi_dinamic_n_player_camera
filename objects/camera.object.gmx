<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///var nodes
for(i=0;  i&lt;instance_number(o_node); ++i) {
    nodes[i] = instance_find(o_node, i);
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///temp tests
counter = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///quit
if keyboard_check(vk_escape) game_end()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///lines between nodes

node_line = -1
t = 0
for(i=0; i&lt;len(nodes); ++i) {
    for(j=0; j&lt;len(nodes); ++j) {
        if i!=j {
            p1 = nodes[i]
            p2 = nodes[j]
            node_line[t] = line(point(p1.x,p1.y), point(p2.x, p2.y))
            t++;
        }
    }
}

//node_line = remove_duplicate_lines(node_line)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///lines between nodes++
/*
node_line = -1
t = 0
for(i=0; i&lt;len(nodes); ++i) {

    var cn = nodes[i]   //cn : other node
    

    //get nodes - current node
    var other_nodes = -1,
    t_ot = 0;
    for(j=0; j&lt;len(nodes); ++j) {
        if i!=j {
            other_nodes[t_ot] = nodes[j];
            t_ot++;
        }
    }
    
    //angles
    var angle = -1;
    for(k=0; k&lt;len(other_nodes); ++k) {
        on = other_nodes[k];   //on : other node
        angle[k] = point_direction(cn.x, cn.y, on.x, on.y);
    }
    
    //remove middle one
    //for(k=0; k&lt;len(other_nodes); ++k) {
        //ok[0] = cyc(k-1, 3) //other angle's index
        //ok[1] = cyc(k+1, 3)
    
        //if angle[ok[0]] &gt;= angle[k] and angle[k] &gt;= angle[ok[1]] {
            //if abs(angle[ok[0]] - angle[ok[1]]) &lt;= 180
                //if angle[ok[0]] &gt; angle[ok[1]]
                
        if (is_between(angle[1], angle[0], angle[2]) 
            and (abs(angle[0] - angle[2]) &lt; 180)) 
                rk = 1
        else if (is_between(angle[0], 0 , 180) 
            and is_between(angle[2], 0 , 180))
                if angle[0] &lt; angle[2] rk=0 else rk=2
        else
            if angle[0] &gt; angle[2] rk=0 else rk=2
            //{
        
            on = other_nodes[cyc(rk-1, 3)];
            node_line[t] = line(point(cn.x, cn.y), point(on.x, on.y));
            t++;
            
            on = other_nodes[cyc(rk+1, 3)];
            node_line[t] = line(point(cn.x, cn.y), point(on.x, on.y));
            t++;
            //break;
            //}
    //}
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ttest counter
if keyboard_check_pressed(ord('R')) counter++;
if keyboard_check_pressed(ord('F')) counter--;

counter = cyc(counter,5)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug
debug[0] = "node_count - " + string(len(nodes));
debug[1] = "line_count - " + string(len(node_line));
debug[2] = "line - " + string(node_line[0]);

for(i=0; i&lt;len(debug); ++i) {
    draw_text(10, i*15+10, debug[i]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DRAWING lines between nodes

for(i=0;  i&lt;len(node_line); ++i) {
   draw_line_pika(node_line[i]);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///normal test
draw_point_pika(line_middle(node_line[0]))
normal(node_line[0])
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
